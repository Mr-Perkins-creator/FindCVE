from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import psycopg2
import os
import json
import logging
from datetime import datetime, timedelta
import requests

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
LOG_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), "../../logs")
os.makedirs(LOG_DIR, exist_ok=True)
LOG_FILE = os.path.join(LOG_DIR, "cve_api.log")

logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO"),
    format="[%(levelname)s] %(asctime)s | %(message)s",
    handlers=[logging.FileHandler(LOG_FILE), logging.StreamHandler()],
)
logger = logging.getLogger(__name__)

app = FastAPI()

# --- CORS ---
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

DB_URL = os.getenv("DB_URL", "postgresql://postgres:postgres@db:5432/cve")
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
if not GITHUB_TOKEN:
    logger.warning("‚ö†Ô∏è  –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GITHUB_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

USERS_FILE = "users.json"
CACHE_FILE = "cache.json"


def get_conn():
    return psycopg2.connect(DB_URL)


# ======================
# üîπ –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
# ======================
def load_users():
    if not os.path.exists(USERS_FILE):
        return {}
    with open(USERS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)


def save_users(users):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)


@app.post("/api/register")
def register(user: dict):
    users = load_users()
    username = user.get("username")
    password = user.get("password")

    if not username or not password:
        raise HTTPException(status_code=400, detail="–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")

    if username in users:
        raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    users[username] = {"password": password}
    save_users(users)

    logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {username}")
    return {"success": True, "message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"}


@app.post("/api/login")
def login(user: dict):
    users = load_users()
    username = user.get("username")
    password = user.get("password")

    if username not in users or users[username]["password"] != password:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    logger.info(f"üîë –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
    return {"success": True, "message": "–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω", "username": username}


# ======================
# üîπ –†–∞–±–æ—Ç–∞ —Å –∫–µ—à–µ–º GitHub
# ======================
def load_cache():
    if not os.path.exists(CACHE_FILE):
        return {}
    with open(CACHE_FILE, "r", encoding="utf-8") as f:
        return json.load(f)


def save_cache(cache):
    with open(CACHE_FILE, "w", encoding="utf-8") as f:
        json.dump(cache, f, ensure_ascii=False, indent=2)


def search_github(cve_id: str):
    cache = load_cache()

    if cve_id in cache:
        updated_at = datetime.fromisoformat(cache[cve_id]["updated"])
        if datetime.utcnow() - updated_at < timedelta(days=1):
            return cache[cve_id]["poc"], cache[cve_id]["affected_projects"]

    if not GITHUB_TOKEN:
        return None, []

    headers = {"Authorization": f"token {GITHUB_TOKEN}"}
    url = f"https://api.github.com/search/repositories?q={cve_id}+PoC+in:name,description,readme"

    try:
        resp = requests.get(url, headers=headers, timeout=10)
        data = resp.json()
        repos = data.get("items", [])
        if not repos:
            poc_url, projects = None, []
        else:
            poc_url = repos[0]["html_url"]
            projects = [r["name"] for r in repos[:5]]

        cache[cve_id] = {
            "poc": poc_url,
            "affected_projects": projects,
            "updated": datetime.utcnow().isoformat(),
        }
        save_cache(cache)

        return poc_url, projects

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ GitHub API: {e}")
        return None, []


# ======================
# üîπ CVE —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
# ======================
@app.get("/api/cves")
def get_all_vulnerabilities():
    """–û—Ç–¥–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("""
        SELECT cve_id, description, cvss_v3_score, cvss_v3_severity, published_at
        FROM vulnerabilities
        ORDER BY published_at DESC
        LIMIT 500
    """)
    rows = cur.fetchall()
    cur.close()
    conn.close()

    result = []
    for r in rows:
        poc, projects = search_github(r[0])
        result.append({
            "cve_id": r[0],
            "description": r[1],
            "cvss_v3_score": float(r[2]) if r[2] is not None else None,
            "cvss_v3_severity": r[3],
            "published_at": r[4],
            "poc": poc,
            "affected_projects": projects,
        })
    logger.info(f"üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(result)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
    return result
