import os
import logging
import psycopg2
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    filters, ContextTypes
)

logging.basicConfig(level=logging.INFO)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
DB_URL = os.getenv("DB_URL", "postgresql://postgres:postgres@db:5432/cve")
CHECK_INTERVAL = 3600  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö CVE —Ä–∞–∑ –≤ —á–∞—Å

# –°—Ç–∏–∫–µ—Ä—ã –∏–∑ –ø–∞–∫–µ—Ç–∞ CVE Hacker
STICKERS = {
    "hi": "CAACAgIAAxkBAAERxsVoryUAAeskVwTvCAGZ9Ii9cBMtSjQAAoSCAAJ21HBJT2W8vdTBMmg2BA",
    "working": "CAACAgIAAxkBAAERxsdoryU8bBcMQI2F4CKyolG_Q4z9nQACMYkAAvDncElJMh0TSjksRTYE",
    "nothing": "CAACAgIAAxkBAAERxsloryVVOQU14gYOPuDGMm_pNKSg1AACUYAAArftcEkaL0GfqCripjYE",
    "success": "CAACAgIAAxkBAAERxsxoryVqMxkVHTlsNgABMfhn0GuN4N0AAjOIAAKcw3hJ4JHLkLdjVik2BA",
    "opa": "CAACAgIAAxkBAAERxs5oryV6vJi0g7DcFwJKSrgQ64MuVwACQnUAAoNlgUmhA_S5CUj5pDYE",
}

# ---------------- DB Helpers ----------------
def ensure_bot_users_table():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É bot_users, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    conn = psycopg2.connect(DB_URL)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS bot_users (
            user_id BIGINT PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            notifications_enabled BOOLEAN DEFAULT TRUE
        )
    """)
    conn.commit()
    cur.close()
    conn.close()

def get_latest_vulns(limit=10):
    conn = psycopg2.connect(DB_URL)
    cur = conn.cursor()
    cur.execute("""
        SELECT cve_id, description, cvss_v3_score, cvss_v3_severity
        FROM vulnerabilities
        ORDER BY published_at DESC
        LIMIT %s
    """, (limit,))
    rows = cur.fetchall()
    cur.close()
    conn.close()
    return rows

def add_user(user_id, username, first_name, last_name):
    conn = psycopg2.connect(DB_URL)
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO bot_users (user_id, username, first_name, last_name, notifications_enabled)
        VALUES (%s, %s, %s, %s, TRUE)
        ON CONFLICT (user_id) DO NOTHING
    """, (user_id, username, first_name, last_name))
    conn.commit()
    cur.close()
    conn.close()

def set_notification_preference(user_id, enable_notifications):
    conn = psycopg2.connect(DB_URL)
    cur = conn.cursor()
    cur.execute("""
        UPDATE bot_users SET notifications_enabled = %s WHERE user_id = %s
    """, (enable_notifications, user_id))
    conn.commit()
    cur.close()
    conn.close()

def get_user_notifications(user_id):
    conn = psycopg2.connect(DB_URL)
    cur = conn.cursor()
    cur.execute("""
        SELECT notifications_enabled FROM bot_users WHERE user_id = %s
    """, (user_id,))
    row = cur.fetchone()
    cur.close()
    conn.close()
    return row[0] if row else False

def get_all_users():
    conn = psycopg2.connect(DB_URL)
    cur = conn.cursor()
    cur.execute("SELECT user_id FROM bot_users WHERE notifications_enabled = true")
    users = cur.fetchall()
    cur.close()
    conn.close()
    return [user[0] for user in users]

# ---------------- Bot Handlers ----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    add_user(user.id, user.username, user.first_name, user.last_name)

    await update.message.reply_sticker(STICKERS["hi"])
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø CVE—Ç–ª—ã–π –•–∞–∫–µ—Ä ü§ñ\n–ß—Ç–æ –¥–µ–ª–∞–µ–º?",
        reply_markup=ReplyKeyboardMarkup(
            [
                [KeyboardButton("–ü–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")],
                [KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")]
            ],
            resize_keyboard=True
        )
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.message.from_user.id

    if text == "–ü–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π":
        await update.message.reply_sticker(STICKERS["working"])
        vulns = get_latest_vulns()
        if not vulns:
            await update.message.reply_sticker(STICKERS["nothing"])
            await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ —Å–≤–µ–∂–µ–≥–æ üëÄ")
        else:
            await update.message.reply_sticker(STICKERS["success"])
            await update.message.reply_text(
                "–ù–∞—à—ë–ª –Ω–æ–≤—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏! –•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏?",
                reply_markup=ReplyKeyboardMarkup(
                    [[KeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏")]],
                    resize_keyboard=True
                )
            )

    elif text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏":
        vulns = get_latest_vulns()
        if not vulns:
            await update.message.reply_sticker(STICKERS["nothing"])
            await update.message.reply_text("–ù–µ—Ç —Å–≤–µ–∂–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π.")
        else:
            msg = ""
            for cve_id, desc, score, sev in vulns:
                msg += f"üõ°Ô∏è <b>{cve_id}</b> ({sev}, {score})\n{desc[:200]}...\n\n"
            await update.message.reply_text(msg, parse_mode="HTML")

    elif text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π":
        current_status = get_user_notifications(user_id)
        if current_status:
            await update.message.reply_text(
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã. –•–æ—Ç–∏—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å?",
                reply_markup=ReplyKeyboardMarkup(
                    [[KeyboardButton("–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")]],
                    resize_keyboard=True
                )
            )
        else:
            await update.message.reply_text(
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã. –•–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å?",
                reply_markup=ReplyKeyboardMarkup(
                    [[KeyboardButton("–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")]],
                    resize_keyboard=True
                )
            )

    elif text == "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
        set_notification_preference(user_id, True)
        await update.message.reply_text("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!")

    elif text == "–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
        set_notification_preference(user_id, False)
        await update.message.reply_text("‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã.")

# ---------------- Periodic Alerts ----------------
async def send_alert(context: ContextTypes.DEFAULT_TYPE):
    vulns = get_latest_vulns(limit=5)
    if not vulns:
        return

    critical_vulns = [
        (cve_id, desc, score, sev)
        for cve_id, desc, score, sev in vulns
        if score and score >= 9
    ]

    if not critical_vulns:
        return

    message = "üö® –ù–æ–≤—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏:\n\n"
    for cve_id, desc, score, sev in critical_vulns:
        message += f"üõ°Ô∏è <b>{cve_id}</b> ({sev}, {score})\n{desc[:200]}...\n\n"

    for user_id in get_all_users():
        try:
            await context.bot.send_sticker(user_id, STICKERS["opa"])
            await context.bot.send_message(user_id, message, parse_mode="HTML")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# ---------------- Main ----------------
def main():
    ensure_bot_users_table()  # <- –¥–æ–±–∞–≤–ª–µ–Ω–æ: —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ CHECK_INTERVAL —Å–µ–∫—É–Ω–¥
    job_queue = application.job_queue
    job_queue.run_repeating(send_alert, CHECK_INTERVAL, first=10)

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()

if __name__ == "__main__":
    main()
